generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String                     @id @default(cuid())
  name                  String
  domain                String?                    @unique
  settings              Json?
  plan                  String                     @default("free")
  stripeCustomerId      String?
  isActive              Boolean                    @default(true)
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  activities            Activity[]
  apiKeys               APIKey[]
  billingEvents         BillingEvent[]
  chatChannels          ChatChannel[]
  complianceAssessments ComplianceAssessment[]
  complianceFrameworks  ComplianceFramework[]
  controls              Control[]
  documents             Document[]
  encryptionKeys        EncryptionKey[]
  extractedControls     ExtractedControl[]
  extractedRisks        ExtractedRisk[]
  notificationDigests   NotificationDigest[]
  notifications         Notification[]
  subscriptions         OrganizationSubscription[]
  proboIntegration      ProboIntegration?
  questionnaires        Questionnaire[]
  rcsaEntries           RcsaEntry[]
  reportSchedules       ReportSchedule[]
  reportTemplates       ReportTemplate[]
  reports               Report[]
  risks                 Risk[]
  spreadsheetTemplates  SpreadsheetTemplate[]      @relation("SpreadsheetTemplateOrg")
  spreadsheets          Spreadsheet[]
  tasks                 Task[]
  testScripts           TestScript[]
  users                 User[]
  workflows             Workflow[]
  workflows_v2          WorkflowV2[]

  @@map("organizations")
}

model User {
  id                          String                         @id @default(cuid())
  email                       String                         @unique
  firstName                   String
  lastName                    String
  passwordHash                String?
  avatar                      String?
  phoneNumber                 String?
  role                        UserRole                       @default(USER)
  permissions                 String[]                       @default([])
  isActive                    Boolean                        @default(true)
  emailVerified               DateTime?
  emailVerificationToken      String?
  emailVerificationExpires    DateTime?
  passwordResetToken          String?
  passwordResetExpires        DateTime?
  lastLogin                   DateTime?
  organizationId              String
  createdAt                   DateTime                       @default(now())
  updatedAt                   DateTime                       @updatedAt
  createdActivities           Activity[]                     @relation("ActivityCreatedBy")
  aiConversations             AIConversation[]
  aiUsageLogs                 AIUsageLog[]
  chatChannelMemberships      ChatChannelMember[]
  createdChatChannels         ChatChannel[]                  @relation("ChatChannelCreatedBy")
  chatMessages                ChatMessage[]                  @relation("ChatMessageAuthor")
  chatReactions               ChatReaction[]
  chatReadReceipts            ChatReadReceipt[]
  comments                    Comment[]
  assessedItems               ComplianceAssessmentItem[]     @relation("AssessmentItemAssessor")
  reviewedItems               ComplianceAssessmentItem[]     @relation("AssessmentItemReviewer")
  assessorAssessments         ComplianceAssessment[]         @relation("ComplianceAssessmentAssessor")
  reviewerAssessments         ComplianceAssessment[]         @relation("ComplianceAssessmentReviewer")
  createdComplianceFrameworks ComplianceFramework[]          @relation("ComplianceFrameworkCreatedBy")
  assignedGaps                ComplianceGap[]                @relation("ComplianceGapAssignee")
  createdControls             Control[]                      @relation("ControlCreatedBy")
  assignedControls            Control[]                      @relation("ControlAssignedTo")
  createdDocuments            Document[]                     @relation("DocumentCreatedBy")
  createdExtractedControls    ExtractedControl[]             @relation("ExtractedControlCreatedBy")
  createdExtractedRisks       ExtractedRisk[]                @relation("ExtractedRiskCreatedBy")
  notificationPreferences     LegacyNotificationPreferences?
  legacyNotifications         LegacyNotification[]
  messages                    Message[]                      @relation("MessageSender")
  notificationDigests         NotificationDigest[]
  notificationPreference      NotificationPreference?
  notificationsList           Notification[]
  pushSubscriptions           PushSubscription[]
  createdQuestionnaires       Questionnaire[]                @relation("QuestionnaireCreatedBy")
  createdRcsaEntries          RcsaEntry[]                    @relation("RcsaEntryCreatedBy")
  createdReportSchedules      ReportSchedule[]               @relation("ReportScheduleCreatedBy")
  createdReportTemplates      ReportTemplate[]               @relation("ReportTemplateCreatedBy")
  createdReports              Report[]                       @relation("ReportCreatedBy")
  responses                   Response[]
  createdRisks                Risk[]                         @relation("RiskCreatedBy")
  assignedRisks               Risk[]                         @relation("RiskAssignedTo")
  sessions                    Session[]
  cellComments                SpreadsheetCellComment[]       @relation("SpreadsheetCellCommentUser")
  modifiedCells               SpreadsheetCell[]              @relation("SpreadsheetCellModifier")
  spreadsheetPermissions      SpreadsheetPermission[]        @relation("SpreadsheetPermissionUser")
  createdTemplates            SpreadsheetTemplate[]          @relation("SpreadsheetTemplateCreator")
  spreadsheetVersions         SpreadsheetVersion[]           @relation("SpreadsheetVersionUser")
  createdSpreadsheets         Spreadsheet[]                  @relation("SpreadsheetCreatedBy")
  assignedTasks               Task[]                         @relation("TaskAssignedTo")
  createdTasks                Task[]                         @relation("TaskCreatedBy")
  testExecutions              TestExecution[]                @relation("TestExecutionExecutor")
  createdTestScripts          TestScript[]                   @relation("TestScriptCreatedBy")
  organization                Organization                   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedWorkflowSteps       WorkflowStep[]                 @relation("WorkflowStepAssignedTo")
  createdWorkflows            Workflow[]                     @relation("WorkflowCreatedBy")
  receivedMessages            Message[]                      @relation("MessageRecipient")

  @@index([organizationId])
  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("sessions")
}

model Risk {
  id              String               @id @default(cuid())
  title           String
  description     String
  category        RiskCategory
  likelihood      Int                  @default(1)
  impact          Int                  @default(1)
  riskScore       Int                  @default(1)
  riskLevel       RiskLevel?
  owner           String?
  status          RiskStatus           @default(IDENTIFIED)
  dateIdentified  DateTime?
  lastAssessed    DateTime?
  nextReview      DateTime?
  aiConfidence    Float?
  organizationId  String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  createdBy       String?
  activities      Activity[]
  controls        ControlRiskMapping[]
  notifications   Notification[]
  creator         User?                @relation("RiskCreatedBy", fields: [createdBy], references: [id])
  organization    Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedUser    User?                @relation("RiskAssignedTo", fields: [owner], references: [id])
  spreadsheetRows SpreadsheetRow[]     @relation("SpreadsheetRowRisk")
  tasks           Task[]
  evidence        Document[]           @relation("RiskEvidence")

  @@index([organizationId])
  @@index([category])
  @@index([status])
  @@index([riskLevel])
  @@index([createdAt])
  @@map("risks")
}

model ControlRiskMapping {
  id            String   @id @default(cuid())
  riskId        String
  controlId     String
  effectiveness Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  control       Control  @relation(fields: [controlId], references: [id], onDelete: Cascade)
  risk          Risk     @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@unique([riskId, controlId])
  @@map("control_risk_mappings")
}

model Control {
  id                  String                      @id @default(cuid())
  title               String
  description         String
  type                ControlType
  category            ControlCategory             @default(OPERATIONAL)
  frequency           String
  automationLevel     AutomationLevel             @default(MANUAL)
  effectiveness       Float                       @default(0)
  effectivenessRating EffectivenessRating?
  owner               String?
  operatorId          String?
  reviewerId          String?
  status              ControlStatus               @default(PLANNED)
  priority            Priority?
  lastTestDate        DateTime?
  nextTestDate        DateTime?
  testResults         String?
  businessUnit        String?
  department          String?
  location            String?
  cost                Float?
  effort              ControlEffort?
  tags                String[]                    @default([])
  customFields        Json?
  organizationId      String
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  createdBy           String?
  activities          Activity[]
  risks               ControlRiskMapping[]
  testScripts         ControlTestScript[]
  creator             User?                       @relation("ControlCreatedBy", fields: [createdBy], references: [id])
  organization        Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedUser        User?                       @relation("ControlAssignedTo", fields: [owner], references: [id])
  requirementMappings RequirementControlMapping[]
  spreadsheetRows     SpreadsheetRow[]            @relation("SpreadsheetRowControl")
  tasks               Task[]
  testExecutions      TestExecution[]
  evidence            Document[]                  @relation("ControlEvidence")

  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@map("controls")
}

model Document {
  id              String       @id @default(cuid())
  name            String
  type            String
  size            Int
  content         String?
  extractedText   String?
  aiAnalysis      Json?
  uploadedAt      DateTime     @default(now())
  organizationId  String
  uploadedBy      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  activities      Activity[]
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader        User?        @relation("DocumentCreatedBy", fields: [uploadedBy], references: [id])
  controlEvidence Control[]    @relation("ControlEvidence")
  riskEvidence    Risk[]       @relation("RiskEvidence")

  @@index([organizationId])
  @@index([type])
  @@index([uploadedAt])
  @@map("documents")
}

model RcsaEntry {
  id              String         @id @default(cuid())
  riskId          String
  riskDescription String
  organizationId  String
  uploadedBy      String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  controls        ControlEntry[]
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader        User?          @relation("RcsaEntryCreatedBy", fields: [uploadedBy], references: [id])

  @@unique([riskId, organizationId])
  @@index([organizationId])
  @@index([riskId])
  @@index([createdAt])
  @@map("rcsa_entries")
}

model ControlEntry {
  id                 String    @id @default(cuid())
  controlId          String
  controlDescription String
  rcsaEntryId        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  rcsaEntry          RcsaEntry @relation(fields: [rcsaEntryId], references: [id], onDelete: Cascade)

  @@index([rcsaEntryId])
  @@index([controlId])
  @@index([createdAt])
  @@map("control_entries")
}

model ExtractedRisk {
  id             String       @id @default(cuid())
  externalId     String
  text           String
  sourceDocument String
  extractedAt    DateTime     @default(now())
  confidence     Float?
  organizationId String
  extractedBy    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  extractor      User?        @relation("ExtractedRiskCreatedBy", fields: [extractedBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([sourceDocument])
  @@index([extractedAt])
  @@map("extracted_risks")
}

model ExtractedControl {
  id             String       @id @default(cuid())
  externalId     String
  text           String
  sourceDocument String
  extractedAt    DateTime     @default(now())
  confidence     Float?
  organizationId String
  extractedBy    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  extractor      User?        @relation("ExtractedControlCreatedBy", fields: [extractedBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([sourceDocument])
  @@index([extractedAt])
  @@map("extracted_controls")
}

model Questionnaire {
  id             String              @id @default(cuid())
  title          String
  description    String
  questions      Json
  targetRoles    String[]            @default([])
  status         QuestionnaireStatus @default(DRAFT)
  dueDate        DateTime?
  estimatedTime  Int?
  tags           String[]            @default([])
  organizationId String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  createdBy      String?
  activities     Activity[]
  creator        User?               @relation("QuestionnaireCreatedBy", fields: [createdBy], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  responses      Response[]

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("questionnaires")
}

model Response {
  id              String        @id @default(cuid())
  questionnaireId String
  questionId      String
  userId          String
  answer          Json
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([questionnaireId])
  @@index([userId])
  @@map("responses")
}

model Workflow {
  id                      String                @id @default(cuid())
  name                    String
  description             String
  type                    WorkflowType
  steps                   Json
  status                  WorkflowStatus        @default(DRAFT)
  assignedTo              String[]              @default([])
  priority                Priority              @default(MEDIUM)
  completedAt             DateTime?
  tags                    String[]              @default([])
  relatedEntities         Json?
  organizationId          String
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  createdBy               String?
  activities              Activity[]
  spreadsheetIntegrations SpreadsheetWorkflow[] @relation("SpreadsheetWorkflowIntegration")
  creator                 User?                 @relation("WorkflowCreatedBy", fields: [createdBy], references: [id])
  organization            Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("workflows")
}

model WorkflowV2 {
  id             String         @id @default(cuid())
  name           String
  description    String
  type           WorkflowType
  status         WorkflowStatus @default(DRAFT)
  priority       Priority       @default(MEDIUM)
  completedAt    DateTime?
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      String?
  steps          WorkflowStep[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@map("workflows_v2")
}

model WorkflowStep {
  id          String           @id @default(cuid())
  workflowId  String
  name        String
  type        WorkflowStepType
  assigneeId  String?
  status      StepStatus       @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  completedBy String?
  order       Int
  conditions  Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignee    User?            @relation("WorkflowStepAssignedTo", fields: [assigneeId], references: [id])
  workflow    WorkflowV2       @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([assigneeId])
  @@map("workflow_steps")
}

model Report {
  id             String         @id @default(cuid())
  title          String
  type           ReportType
  status         ReportStatus   @default(DRAFT)
  data           Json?
  parameters     Json?
  sharedWith     String[]       @default([])
  exportFormats  String[]       @default([])
  organizationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      String?
  description    String?
  fileUrl        String?
  format         String?
  generatedAt    DateTime?
  templateId     String?
  activities     Activity[]
  notifications  Notification[]
  creator        User?          @relation("ReportCreatedBy", fields: [createdBy], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([templateId])
  @@map("reports")
}

model Task {
  id              String           @id @default(cuid())
  title           String
  description     String?
  type            TaskType
  status          TaskStatus       @default(TODO)
  priority        Priority         @default(MEDIUM)
  assigneeId      String?
  assignedBy      String?
  dueDate         DateTime?
  completedAt     DateTime?
  estimatedHours  Int?
  actualHours     Int?
  tags            String[]         @default([])
  riskId          String?
  controlId       String?
  organizationId  String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?
  activities      Activity[]
  spreadsheetRows SpreadsheetRow[] @relation("SpreadsheetRowTask")
  assignee        User?            @relation("TaskAssignedTo", fields: [assigneeId], references: [id])
  control         Control?         @relation(fields: [controlId], references: [id])
  creator         User?            @relation("TaskCreatedBy", fields: [createdBy], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  risk            Risk?            @relation(fields: [riskId], references: [id])

  @@index([organizationId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model Message {
  id           String        @id @default(cuid())
  content      String
  type         MessageType   @default(DIRECT)
  status       MessageStatus @default(SENT)
  senderId     String
  recipientIds String[]      @default([])
  threadId     String?
  mentions     String[]      @default([])
  attachments  Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sender       User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipients   User[]        @relation("MessageRecipient")

  @@index([senderId])
  @@index([threadId])
  @@index([createdAt])
  @@map("messages")
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  authorId    String
  entityType  EntityType
  entityId    String
  parentId    String?
  mentions    String[]   @default([])
  attachments Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]  @relation("CommentReplies")

  @@index([entityType, entityId])
  @@index([authorId])
  @@index([createdAt])
  @@map("comments")
}

model LegacyNotification {
  id                String           @id @default(cuid())
  type              NotificationType
  title             String
  message           String
  read              Boolean          @default(false)
  isRead            Boolean          @default(false)
  readAt            DateTime?
  deliveredAt       DateTime?
  userId            String
  recipientId       String
  senderId          String?          @default("system")
  entityType        String?          @default("SYSTEM")
  entityId          String?          @default("system")
  actionUrl         String?
  relatedEntityType String?
  relatedEntityId   String?
  priority          Priority         @default(MEDIUM)
  includeInDigest   Boolean          @default(false)
  pendingDigest     Boolean          @default(false)
  digestFrequency   String?
  digestSentAt      DateTime?
  createdAt         DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipientId])
  @@index([read])
  @@index([isRead])
  @@index([createdAt])
  @@map("legacy_notifications")
}

model Activity {
  id              String         @id @default(cuid())
  type            ActivityType
  userId          String?
  entityType      EntityType
  entityId        String
  description     String
  metadata        Json?
  isPublic        Boolean        @default(true)
  organizationId  String
  createdAt       DateTime       @default(now())
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User?          @relation("ActivityCreatedBy", fields: [userId], references: [id])
  Risk            Risk?          @relation(fields: [riskId], references: [id])
  riskId          String?
  Control         Control?       @relation(fields: [controlId], references: [id])
  controlId       String?
  Document        Document?      @relation(fields: [documentId], references: [id])
  documentId      String?
  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
  Workflow        Workflow?      @relation(fields: [workflowId], references: [id])
  workflowId      String?
  Report          Report?        @relation(fields: [reportId], references: [id])
  reportId        String?
  Task            Task?          @relation(fields: [taskId], references: [id])
  taskId          String?

  @@index([organizationId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}

model AIConversation {
  id             String   @id @default(cuid())
  userId         String
  title          String
  agentType      String
  messages       Json
  context        Json?
  status         String   @default("active")
  tokenUsage     Int      @default(0)
  estimatedCost  Float    @default(0)
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_conversations")
}

model AIUsageLog {
  id               String   @id @default(cuid())
  userId           String
  requestType      String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  estimatedCost    Float
  responseTime     Int
  success          Boolean  @default(true)
  errorMessage     String?
  organizationId   String
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_usage_logs")
}

model LegacyNotificationPreferences {
  id         String   @id @default(cuid())
  userId     String   @unique
  email      Json
  push       Json
  sms        Json
  slack      Json
  inApp      Json
  quietHours Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("legacy_notification_preferences")
}

model EncryptionKey {
  id             String       @id @default(cuid())
  purpose        String
  encryptedKey   String
  algorithm      String
  status         String       @default("active")
  version        Int          @default(1)
  metadata       Json?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  rotatedAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([purpose])
  @@index([status])
  @@map("encryption_keys")
}

model EncryptionKeyHistory {
  id           String   @id @default(cuid())
  keyId        String
  version      Int
  encryptedKey String
  rotatedAt    DateTime
  reason       String
  createdAt    DateTime @default(now())

  @@index([keyId])
  @@map("encryption_key_history")
}

model SubscriptionPlan {
  id              String                     @id @default(cuid())
  name            String
  description     String
  type            String
  price           Float
  currency        String                     @default("USD")
  billingInterval String
  features        Json
  limits          Json
  isActive        Boolean                    @default(true)
  trialDays       Int                        @default(0)
  stripeProductId String?
  stripePriceId   String?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  subscriptions   OrganizationSubscription[]

  @@map("subscription_plans")
}

model OrganizationSubscription {
  id                   String           @id @default(cuid())
  organizationId       String
  planId               String
  stripeSubscriptionId String?
  stripeCustomerId     String?
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  trialStart           DateTime?
  trialEnd             DateTime?
  canceledAt           DateTime?
  cancelAtPeriodEnd    Boolean          @default(false)
  billingCycle         String
  quantity             Int              @default(1)
  unitPrice            Float
  metadata             Json?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  invoices             Invoice[]
  organization         Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])
  usageRecords         UsageRecord[]

  @@index([organizationId])
  @@index([stripeSubscriptionId])
  @@map("organization_subscriptions")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  organizationId        String
  stripePaymentMethodId String
  type                  String
  card                  Json?
  bankAccount           Json?
  isDefault             Boolean  @default(false)
  isActive              Boolean  @default(true)
  metadata              Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([organizationId])
  @@map("payment_methods")
}

model Invoice {
  id              String                    @id @default(cuid())
  organizationId  String
  subscriptionId  String?
  stripeInvoiceId String?                   @unique
  invoiceNumber   String
  status          String
  type            String
  subtotal        Float
  taxAmount       Float                     @default(0)
  discountAmount  Float                     @default(0)
  total           Float
  currency        String                    @default("USD")
  billingPeriod   Json?
  lineItems       Json
  dueDate         DateTime
  paidAt          DateTime?
  metadata        Json?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  subscription    OrganizationSubscription? @relation(fields: [subscriptionId], references: [id])

  @@index([organizationId])
  @@index([subscriptionId])
  @@map("invoices")
}

model UsageRecord {
  id             String                   @id @default(cuid())
  organizationId String
  subscriptionId String
  metricType     String
  quantity       Float
  unitPrice      Float                    @default(0)
  total          Float                    @default(0)
  period         DateTime
  metadata       Json?
  createdAt      DateTime                 @default(now())
  subscription   OrganizationSubscription @relation(fields: [subscriptionId], references: [id])

  @@index([organizationId])
  @@index([subscriptionId])
  @@index([metricType])
  @@index([period])
  @@map("usage_records")
}

model BillingEvent {
  id             String       @id @default(cuid())
  organizationId String
  type           String
  eventData      Json
  stripeEventId  String?      @unique
  processed      Boolean      @default(false)
  processedAt    DateTime?
  errorMessage   String?
  retryCount     Int          @default(0)
  nextRetryAt    DateTime?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId])
  @@index([type])
  @@index([processed])
  @@map("billing_events")
}

model APIKey {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  key            String       @unique
  hashedKey      String       @unique
  permissions    String[]
  ipWhitelist    String[]
  lastUsedAt     DateTime?
  expiresAt      DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([hashedKey])
  @@map("api_keys")
}

model Spreadsheet {
  id             String                  @id @default(cuid())
  organizationId String
  name           String
  description    String?
  templateType   SpreadsheetType
  isTemplate     Boolean                 @default(false)
  createdBy      String
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  permissions    SpreadsheetPermission[]
  sheets         SpreadsheetSheet[]
  versions       SpreadsheetVersion[]
  workflows      SpreadsheetWorkflow[]
  creator        User                    @relation("SpreadsheetCreatedBy", fields: [createdBy], references: [id])
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([templateType])
  @@index([createdBy])
  @@map("spreadsheets")
}

model SpreadsheetSheet {
  id            String              @id @default(cuid())
  spreadsheetId String
  name          String
  position      Int
  isHidden      Boolean             @default(false)
  settings      Json?
  columns       SpreadsheetColumn[]
  rows          SpreadsheetRow[]
  spreadsheet   Spreadsheet         @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)

  @@index([spreadsheetId])
  @@map("spreadsheet_sheets")
}

model SpreadsheetColumn {
  id              String            @id @default(cuid())
  sheetId         String
  name            String
  position        Int
  dataType        ColumnDataType
  isRequired      Boolean           @default(false)
  isCalculated    Boolean           @default(false)
  formula         String?
  width           Int               @default(150)
  linkedEntity    String?
  linkedField     String?
  validationRules Json?
  dropdownOptions String[]
  formatSettings  Json?
  cells           SpreadsheetCell[]
  sheet           SpreadsheetSheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@index([sheetId])
  @@map("spreadsheet_columns")
}

model SpreadsheetRow {
  id                 String            @id @default(cuid())
  sheetId            String
  position           Int
  isHidden           Boolean           @default(false)
  height             Int               @default(40)
  linkedRiskId       String?
  linkedControlId    String?
  linkedTaskId       String?
  linkedTestScriptId String?
  cells              SpreadsheetCell[]
  linkedControl      Control?          @relation("SpreadsheetRowControl", fields: [linkedControlId], references: [id])
  linkedRisk         Risk?             @relation("SpreadsheetRowRisk", fields: [linkedRiskId], references: [id])
  linkedTask         Task?             @relation("SpreadsheetRowTask", fields: [linkedTaskId], references: [id])
  linkedTestScript   TestScript?       @relation("SpreadsheetRowTestScript", fields: [linkedTestScriptId], references: [id])
  sheet              SpreadsheetSheet  @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  @@index([sheetId])
  @@index([linkedRiskId])
  @@index([linkedControlId])
  @@map("spreadsheet_rows")
}

model SpreadsheetCell {
  id             String                   @id @default(cuid())
  rowId          String
  columnId       String
  value          Json?
  displayValue   String?
  isLocked       Boolean                  @default(false)
  lastModifiedBy String
  lastModifiedAt DateTime                 @default(now())
  formatting     Json?
  comments       SpreadsheetCellComment[]
  column         SpreadsheetColumn        @relation(fields: [columnId], references: [id], onDelete: Cascade)
  modifier       User                     @relation("SpreadsheetCellModifier", fields: [lastModifiedBy], references: [id])
  row            SpreadsheetRow           @relation(fields: [rowId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
  @@index([lastModifiedBy])
  @@map("spreadsheet_cells")
}

model SpreadsheetCellComment {
  id        String                   @id @default(cuid())
  cellId    String
  userId    String
  content   String
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  resolved  Boolean                  @default(false)
  parentId  String?
  cell      SpreadsheetCell          @relation(fields: [cellId], references: [id], onDelete: Cascade)
  parent    SpreadsheetCellComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   SpreadsheetCellComment[] @relation("CommentReplies")
  user      User                     @relation("SpreadsheetCellCommentUser", fields: [userId], references: [id])

  @@index([cellId])
  @@index([userId])
  @@map("spreadsheet_cell_comments")
}

model SpreadsheetPermission {
  id            String                    @id @default(cuid())
  spreadsheetId String
  userId        String
  permission    SpreadsheetPermissionType
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  spreadsheet   Spreadsheet               @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  user          User                      @relation("SpreadsheetPermissionUser", fields: [userId], references: [id])

  @@unique([spreadsheetId, userId])
  @@index([spreadsheetId])
  @@index([userId])
  @@map("spreadsheet_permissions")
}

model SpreadsheetWorkflow {
  id            String      @id @default(cuid())
  spreadsheetId String
  workflowId    String
  triggerType   String
  triggerConfig Json?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  spreadsheet   Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  workflow      Workflow    @relation("SpreadsheetWorkflowIntegration", fields: [workflowId], references: [id])

  @@index([spreadsheetId])
  @@index([workflowId])
  @@map("spreadsheet_workflows")
}

model SpreadsheetVersion {
  id            String      @id @default(cuid())
  spreadsheetId String
  version       Int
  changedBy     String
  changes       Json
  createdAt     DateTime    @default(now())
  description   String?
  user          User        @relation("SpreadsheetVersionUser", fields: [changedBy], references: [id])
  spreadsheet   Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)

  @@index([spreadsheetId])
  @@index([version])
  @@map("spreadsheet_versions")
}

model SpreadsheetTemplate {
  id             String          @id @default(cuid())
  organizationId String?
  name           String
  description    String
  category       String
  templateType   SpreadsheetType
  config         Json
  isPublic       Boolean         @default(false)
  isActive       Boolean         @default(true)
  usageCount     Int             @default(0)
  createdBy      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  creator        User            @relation("SpreadsheetTemplateCreator", fields: [createdBy], references: [id])
  organization   Organization?   @relation("SpreadsheetTemplateOrg", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([templateType])
  @@index([category])
  @@map("spreadsheet_templates")
}

model TestScript {
  id                String              @id @default(cuid())
  title             String
  description       String
  steps             Json
  expectedResults   String
  testType          TestScriptType
  frequency         TestFrequency
  estimatedDuration Int?
  automationCapable Boolean             @default(false)
  automationScript  String?
  tags              String[]            @default([])
  organizationId    String
  createdBy         String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  controls          ControlTestScript[]
  spreadsheetRows   SpreadsheetRow[]    @relation("SpreadsheetRowTestScript")
  testExecutions    TestExecution[]
  creator           User?               @relation("TestScriptCreatedBy", fields: [createdBy], references: [id])
  organization      Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([testType])
  @@index([frequency])
  @@map("test_scripts")
}

model ControlTestScript {
  id           String     @id @default(cuid())
  controlId    String
  testScriptId String
  isMandatory  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  control      Control    @relation(fields: [controlId], references: [id], onDelete: Cascade)
  testScript   TestScript @relation(fields: [testScriptId], references: [id], onDelete: Cascade)

  @@unique([controlId, testScriptId])
  @@index([controlId])
  @@index([testScriptId])
  @@map("control_test_scripts")
}

model TestExecution {
  id            String     @id @default(cuid())
  testScriptId  String
  controlId     String
  executedBy    String
  executionDate DateTime   @default(now())
  status        TestStatus
  results       Json
  evidence      String[]   @default([])
  notes         String?
  duration      Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  control       Control    @relation(fields: [controlId], references: [id])
  executor      User       @relation("TestExecutionExecutor", fields: [executedBy], references: [id])
  testScript    TestScript @relation(fields: [testScriptId], references: [id])

  @@index([testScriptId])
  @@index([controlId])
  @@index([executedBy])
  @@index([status])
  @@index([executionDate])
  @@map("test_executions")
}

model ReportTemplate {
  id                String           @id @default(cuid())
  name              String
  description       String?
  type              ReportType
  templateConfig    Json
  defaultParameters Json?
  isActive          Boolean          @default(true)
  organizationId    String
  createdBy         String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  reportSchedules   ReportSchedule[]
  creator           User?            @relation("ReportTemplateCreatedBy", fields: [createdBy], references: [id])
  organization      Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
  @@map("report_templates")
}

model ReportSchedule {
  id               String            @id @default(cuid())
  reportTemplateId String
  name             String
  description      String?
  frequency        ScheduleFrequency
  scheduleConfig   Json
  recipients       String[]          @default([])
  isActive         Boolean           @default(true)
  lastRunAt        DateTime?
  nextRunAt        DateTime?
  organizationId   String
  createdBy        String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  creator          User?             @relation("ReportScheduleCreatedBy", fields: [createdBy], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reportTemplate   ReportTemplate    @relation(fields: [reportTemplateId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([reportTemplateId])
  @@index([nextRunAt])
  @@map("report_schedules")
}

model ChatChannel {
  id             String              @id @default(cuid())
  name           String
  description    String?
  type           ChannelType         @default(PUBLIC)
  isPrivate      Boolean             @default(false)
  organizationId String
  createdBy      String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  lastActivityAt DateTime            @default(now())
  members        ChatChannelMember[]
  creator        User?               @relation("ChatChannelCreatedBy", fields: [createdBy], references: [id])
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages       ChatMessage[]

  @@index([organizationId])
  @@index([type])
  @@index([lastActivityAt])
  @@map("chat_channels")
}

model ChatChannelMember {
  id                   String            @id @default(cuid())
  channelId            String
  userId               String
  role                 ChannelMemberRole @default(MEMBER)
  joinedAt             DateTime          @default(now())
  lastReadAt           DateTime          @default(now())
  notificationSettings Json?
  channel              ChatChannel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@index([userId])
  @@index([channelId])
  @@map("chat_channel_members")
}

model ChatMessage {
  id           String            @id @default(cuid())
  channelId    String
  userId       String
  content      String
  type         ChatMessageType   @default(TEXT)
  attachments  Json?
  metadata     Json?
  isEdited     Boolean           @default(false)
  editedAt     DateTime?
  isDeleted    Boolean           @default(false)
  deletedAt    DateTime?
  parentId     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  channel      ChatChannel       @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parent       ChatMessage?      @relation("MessageReplies", fields: [parentId], references: [id])
  replies      ChatMessage[]     @relation("MessageReplies")
  user         User              @relation("ChatMessageAuthor", fields: [userId], references: [id])
  reactions    ChatReaction[]
  readReceipts ChatReadReceipt[]

  @@index([channelId])
  @@index([userId])
  @@index([createdAt])
  @@index([parentId])
  @@map("chat_messages")
}

model ChatReaction {
  id        String      @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime    @default(now())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
  @@map("chat_reactions")
}

model ChatReadReceipt {
  id        String      @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime    @default(now())
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("chat_read_receipts")
}

model ProboIntegration {
  id              String        @id @default(cuid())
  organizationId  String        @unique
  apiKeyEncrypted String?
  webhookUrl      String?
  webhookSecret   String?
  config          Json?
  isActive        Boolean       @default(true)
  lastSyncAt      DateTime?
  lastSyncStatus  String?
  lastSyncError   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  metrics         ProboMetric[]

  @@map("probo_integrations")
}

model ProboMetric {
  id            String           @id @default(cuid())
  integrationId String
  metricType    String
  metricValue   Json
  metadata      Json?
  timestamp     DateTime         @default(now())
  integration   ProboIntegration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([metricType])
  @@index([timestamp])
  @@map("probo_metrics")
}

model Cache {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([expiresAt])
  @@map("cache")
}

model NotificationPreference {
  id         String          @id @default(cuid())
  userId     String          @unique
  quietHours Json?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  categories Json            @default("{}")
  digest     DigestFrequency @default(DAILY)
  email      Boolean         @default(true)
  push       Boolean         @default(true)
  inApp      Boolean         @default(true)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Notification {
  id             String                  @id @default(cuid())
  title          String
  message        String
  read           Boolean                 @default(false)
  readAt         DateTime?
  userId         String
  actionUrl      String?
  createdAt      DateTime                @default(now())
  category       NotificationCategory
  data           Json?
  dismissed      Boolean                 @default(false)
  dismissedAt    DateTime?
  emailSent      Boolean                 @default(false)
  emailSentAt    DateTime?
  iconUrl        String?
  organizationId String
  pushSent       Boolean                 @default(false)
  pushSentAt     DateTime?
  reportId       String?
  riskId         String?
  updatedAt      DateTime                @updatedAt
  type           NotificationMessageType
  priority       NotificationPriority    @default(MEDIUM)
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  report         Report?                 @relation(fields: [reportId], references: [id])
  risk           Risk?                   @relation(fields: [riskId], references: [id])
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read, createdAt])
  @@index([organizationId, category])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationDigest {
  id             String          @id @default(cuid())
  userId         String
  organizationId String
  frequency      DigestFrequency
  lastSentAt     DateTime?
  nextSendAt     DateTime
  notifications  Json
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, frequency])
  @@index([nextSendAt])
  @@map("notification_digests")
}

model PushSubscription {
  id         String    @id @default(cuid())
  userId     String
  endpoint   String    @unique
  auth       String
  p256dh     String
  deviceInfo Json?
  active     Boolean   @default(true)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, active])
  @@map("push_subscriptions")
}

model ComplianceFramework {
  id             String                  @id @default(cuid())
  name           String
  description    String?
  version        String?
  type           ComplianceFrameworkType
  isActive       Boolean                 @default(true)
  organizationId String
  createdBy      String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  assessments    ComplianceAssessment[]
  creator        User?                   @relation("ComplianceFrameworkCreatedBy", fields: [createdBy], references: [id])
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  requirements   ComplianceRequirement[]

  @@index([organizationId])
  @@index([type])
  @@map("compliance_frameworks")
}

model ComplianceRequirement {
  id              String                      @id @default(cuid())
  frameworkId     String
  requirementId   String
  title           String
  description     String
  category        String
  criticality     RequirementCriticality
  parentId        String?
  order           Int                         @default(0)
  assessmentItems ComplianceAssessmentItem[]
  framework       ComplianceFramework         @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  parent          ComplianceRequirement?      @relation("RequirementHierarchy", fields: [parentId], references: [id])
  children        ComplianceRequirement[]     @relation("RequirementHierarchy")
  controlMappings RequirementControlMapping[]

  @@index([frameworkId])
  @@index([parentId])
  @@map("compliance_requirements")
}

model RequirementControlMapping {
  id            String                @id @default(cuid())
  requirementId String
  controlId     String
  mappingType   MappingType
  effectiveness Float                 @default(0)
  notes         String?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  control       Control               @relation(fields: [controlId], references: [id], onDelete: Cascade)
  requirement   ComplianceRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@unique([requirementId, controlId])
  @@index([requirementId])
  @@index([controlId])
  @@map("requirement_control_mappings")
}

model ComplianceAssessment {
  id             String                     @id @default(cuid())
  frameworkId    String
  name           String
  description    String?
  assessmentDate DateTime                   @default(now())
  dueDate        DateTime?
  status         AssessmentStatus           @default(IN_PROGRESS)
  overallScore   Float?
  organizationId String
  assessorId     String?
  reviewerId     String?
  completedAt    DateTime?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  items          ComplianceAssessmentItem[]
  assessor       User?                      @relation("ComplianceAssessmentAssessor", fields: [assessorId], references: [id])
  framework      ComplianceFramework        @relation(fields: [frameworkId], references: [id])
  organization   Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reviewer       User?                      @relation("ComplianceAssessmentReviewer", fields: [reviewerId], references: [id])
  gaps           ComplianceGap[]

  @@index([organizationId])
  @@index([frameworkId])
  @@index([status])
  @@map("compliance_assessments")
}

model ComplianceAssessmentItem {
  id              String                @id @default(cuid())
  assessmentId    String
  requirementId   String
  status          ComplianceStatus
  score           Float?
  evidence        Json?
  findings        String?
  recommendations String?
  assessedBy      String?
  assessedAt      DateTime?
  reviewedBy      String?
  reviewedAt      DateTime?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  assessor        User?                 @relation("AssessmentItemAssessor", fields: [assessedBy], references: [id])
  assessment      ComplianceAssessment  @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  requirement     ComplianceRequirement @relation(fields: [requirementId], references: [id])
  reviewer        User?                 @relation("AssessmentItemReviewer", fields: [reviewedBy], references: [id])

  @@unique([assessmentId, requirementId])
  @@index([assessmentId])
  @@index([requirementId])
  @@index([status])
  @@map("compliance_assessment_items")
}

model ComplianceGap {
  id              String               @id @default(cuid())
  assessmentId    String
  requirementId   String
  gapType         GapType
  severity        GapSeverity
  description     String
  impact          String?
  remediationPlan String?
  estimatedEffort Int?
  targetDate      DateTime?
  status          GapStatus            @default(IDENTIFIED)
  assignedTo      String?
  closedAt        DateTime?
  closureNotes    String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  assessment      ComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assignee        User?                @relation("ComplianceGapAssignee", fields: [assignedTo], references: [id])

  @@index([assessmentId])
  @@index([status])
  @@index([severity])
  @@map("compliance_gaps")
}

enum UserRole {
  ADMIN
  RISK_MANAGER
  AUDITOR
  USER
}

enum RiskCategory {
  OPERATIONAL
  FINANCIAL
  STRATEGIC
  COMPLIANCE
  TECHNOLOGY
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATED
  CLOSED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ControlType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  DIRECTIVE
  COMPENSATING
}

enum ControlStatus {
  PLANNED
  IMPLEMENTED
  TESTING
  OPERATIONAL
  REMEDIATION
  DISABLED
  ACTIVE
  INACTIVE
}

enum ControlCategory {
  TECHNICAL
  ADMINISTRATIVE
  PHYSICAL
  OPERATIONAL
  MANAGEMENT
}

enum AutomationLevel {
  MANUAL
  SEMI_AUTOMATED
  FULLY_AUTOMATED
}

enum EffectivenessRating {
  NOT_EFFECTIVE
  PARTIALLY_EFFECTIVE
  LARGELY_EFFECTIVE
  FULLY_EFFECTIVE
}

enum ControlEffort {
  LOW
  MEDIUM
  HIGH
}

enum QuestionnaireStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WorkflowType {
  APPROVAL
  REVIEW
  ASSESSMENT
  CUSTOM
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WorkflowStepType {
  APPROVAL
  REVIEW
  ACTION
  NOTIFICATION
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  SKIPPED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportType {
  RISK_ASSESSMENT
  CONTROL_EFFECTIVENESS
  COMPLIANCE
  AUDIT
  EXECUTIVE_DASHBOARD
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TaskType {
  RISK_ASSESSMENT
  CONTROL_TESTING
  DOCUMENT_REVIEW
  WORKFLOW_STEP
  CUSTOM
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum MessageType {
  DIRECT
  GROUP
  BROADCAST
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum EntityType {
  RISK
  CONTROL
  DOCUMENT
  TASK
  WORKFLOW
  QUESTIONNAIRE
  REPORT
  USER
}

enum NotificationType {
  SUCCESS
  ERROR
  WARNING
  INFO
  MENTION
  TASK_ASSIGNED
  WORKFLOW_UPDATE
  APPROVAL_REQUIRED
  COMMENT_CREATED
  DOCUMENT_SHARED
  RISK_UPDATED
  CONTROL_UPDATED
  SUBSCRIPTION_CANCELED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  TRIAL_ENDING
  NOTIFICATION_DIGEST
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  READ
  APPROVED
  REJECTED
  SUBMITTED
  COMPLETED
  ASSIGNED
  COMMENTED
  UPLOADED
  DOWNLOADED
  EXPORTED
  IMPORTED
}

enum SpreadsheetType {
  RCSA_ASSESSMENT
  RISK_REGISTER
  CONTROL_MATRIX
  COMPLIANCE_TRACKER
  VENDOR_ASSESSMENT
  AUDIT_FINDINGS
  INCIDENT_TRACKER
  CUSTOM
}

enum ColumnDataType {
  TEXT
  NUMBER
  DATE
  DATETIME
  BOOLEAN
  DROPDOWN
  MULTI_SELECT
  USER_REFERENCE
  RISK_REFERENCE
  CONTROL_REFERENCE
  TASK_REFERENCE
  CALCULATED
  RATING
  CURRENCY
  PERCENTAGE
  EMAIL
  URL
  PHONE
  FILE_ATTACHMENT
  TEST_SCRIPT_REFERENCE
}

enum SpreadsheetPermissionType {
  OWNER
  EDITOR
  COMMENTER
  VIEWER
}

enum TestScriptType {
  MANUAL
  AUTOMATED
  HYBRID
  INQUIRY
  OBSERVATION
  INSPECTION
  REPERFORMANCE
}

enum TestFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  AD_HOC
  CONTINUOUS
}

enum TestStatus {
  PASSED
  FAILED
  PARTIAL
  NOT_APPLICABLE
  IN_PROGRESS
  PENDING
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  CUSTOM
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
  ANNOUNCEMENT
}

enum ChannelMemberRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum ChatMessageType {
  TEXT
  FILE
  IMAGE
  SYSTEM
  ANNOUNCEMENT
}

enum DigestFrequency {
  REALTIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum NotificationCategory {
  RISK
  COMPLIANCE
  REPORT
  CHAT
  BILLING
  SYSTEM
  SECURITY
  TEAM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationMessageType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACTION_REQUIRED
}

enum ComplianceFrameworkType {
  ISO_27001
  SOC2
  PCI_DSS
  HIPAA
  GDPR
  NIST
  CIS
  CUSTOM
}

enum RequirementCriticality {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum MappingType {
  PRIMARY
  SECONDARY
  SUPPORTING
  COMPENSATING
}

enum AssessmentStatus {
  PLANNED
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  CANCELLED
}

enum ComplianceStatus {
  COMPLIANT
  PARTIALLY_COMPLIANT
  NON_COMPLIANT
  NOT_APPLICABLE
  NOT_ASSESSED
}

enum GapType {
  MISSING_CONTROL
  INEFFECTIVE_CONTROL
  MISSING_DOCUMENTATION
  PROCESS_GAP
  TECHNICAL_GAP
  TRAINING_GAP
  POLICY_GAP
}

enum GapSeverity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum GapStatus {
  IDENTIFIED
  IN_REMEDIATION
  RESOLVED
  ACCEPTED
  DEFERRED
}
