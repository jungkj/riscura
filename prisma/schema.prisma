// Prisma schema for Riscura RCSA Platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// ORGANIZATION & USER MANAGEMENT
// ============================================================================

model Organization {
  id               String   @id @default(cuid())
  name             String
  domain           String?  @unique
  settings         Json?    // Organization-specific settings
  plan             String   @default("free") // free, pro, enterprise
  stripeCustomerId String?  // Stripe customer ID for billing
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  users                   User[]
  risks                   Risk[]
  controls                Control[]
  documents               Document[]
  rcsaEntries             RcsaEntry[]
  extractedRisks          ExtractedRisk[]
  extractedControls       ExtractedControl[]
  questionnaires          Questionnaire[]
  workflows               Workflow[]
  reports                 Report[]
  activities              Activity[]
  tasks                   Task[]
  workflows_v2            WorkflowV2[]
  subscriptions           OrganizationSubscription[]
  encryptionKeys          EncryptionKey[]
  billingEvents           BillingEvent[]
  apiKeys                 APIKey[]
  
  // Spreadsheet relationships
  spreadsheets            Spreadsheet[]
  spreadsheetTemplates    SpreadsheetTemplate[]  @relation("SpreadsheetTemplateOrg")
  
  // Probo integration relationships
  complianceFrameworks    ComplianceFramework[]
  complianceAssessments   ComplianceAssessment[]
  vendors                 Vendor[]
  vendorAssessments       VendorAssessment[]
  mitigationControls      MitigationControl[]
  
  // New Probo models
  proboControls           ProboControl[]
  proboEvidences          ProboEvidence[]
  proboTasks              ProboTask[]
  proboMeasures           ProboMeasure[]
  
  @@map("organizations")
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  firstName      String
  lastName       String
  passwordHash   String?
  avatar         String?
  phoneNumber    String?   // Phone number for SMS notifications
  role           UserRole  @default(USER)
  permissions    String[]  @default([])
  isActive       Boolean   @default(true)
  emailVerified  DateTime?
  emailVerificationToken   String?   // Token for email verification
  emailVerificationExpires DateTime? // Expiration time for verification token
  passwordResetToken       String?   // Token for password reset
  passwordResetExpires     DateTime? // Expiration time for password reset token
  lastLogin      DateTime?
  organizationId String
  
  // Audit fields
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Created entities
  createdRisks            Risk[]            @relation("RiskCreatedBy")
  createdControls         Control[]         @relation("ControlCreatedBy")
  createdDocuments        Document[]        @relation("DocumentCreatedBy")
  createdRcsaEntries      RcsaEntry[]       @relation("RcsaEntryCreatedBy")
  createdExtractedRisks   ExtractedRisk[]   @relation("ExtractedRiskCreatedBy")
  createdExtractedControls ExtractedControl[] @relation("ExtractedControlCreatedBy")
  createdQuestionnaires   Questionnaire[]   @relation("QuestionnaireCreatedBy")
  createdWorkflows        Workflow[]        @relation("WorkflowCreatedBy")
  createdReports          Report[]          @relation("ReportCreatedBy")
  createdActivities       Activity[]        @relation("ActivityCreatedBy")
  createdTasks            Task[]            @relation("TaskCreatedBy")
  
  // Assigned entities
  assignedRisks           Risk[]            @relation("RiskAssignedTo")
  assignedControls        Control[]         @relation("ControlAssignedTo")
  assignedTasks           Task[]            @relation("TaskAssignedTo")
  assignedWorkflowSteps   WorkflowStep[]    @relation("WorkflowStepAssignedTo")
  
  // Responses and interactions
  responses               Response[]
  comments                Comment[]
  messages                Message[]         @relation("MessageSender")
  receivedMessages        Message[]         @relation("MessageRecipient")
  notifications           Notification[]
  
  // Session management
  sessions                Session[]
  
  // Preferences
  notificationPreferences NotificationPreferences?
  
  // AI & Billing
  aiConversations         AIConversation[]
  aiUsageLogs             AIUsageLog[]
  
  // Spreadsheet relationships
  createdSpreadsheets     Spreadsheet[]          @relation("SpreadsheetCreatedBy")
  modifiedCells           SpreadsheetCell[]      @relation("SpreadsheetCellModifier")
  cellComments            SpreadsheetCellComment[] @relation("SpreadsheetCellCommentUser")
  spreadsheetPermissions  SpreadsheetPermission[] @relation("SpreadsheetPermissionUser")
  spreadsheetVersions     SpreadsheetVersion[]   @relation("SpreadsheetVersionUser")
  createdTemplates        SpreadsheetTemplate[]  @relation("SpreadsheetTemplateCreator")
  
  // Probo integration relationships
  complianceAssessments   ComplianceAssessment[] @relation("ComplianceAssessmentAssessor")
  controlAssessments      ControlAssessmentResult[] @relation("ControlAssessmentAssessor")
  evidenceUploads         AssessmentEvidence[]   @relation("AssessmentEvidenceUploader")
  assignedFindings        AssessmentFinding[]    @relation("AssessmentFindingAssignee")
  vendorAssessments       VendorAssessment[]     @relation("VendorAssessmentAssessor")
  vendorDocuments         VendorDocument[]       @relation("VendorDocumentUploader")
  
  @@index([organizationId])
  @@index([email])
  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  ipAddress    String?
  userAgent    String?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
  @@map("sessions")
}

enum UserRole {
  ADMIN
  RISK_MANAGER
  AUDITOR
  USER
}

// ============================================================================
// RISK MANAGEMENT
// ============================================================================

model Risk {
  id             String       @id @default(cuid())
  title          String
  description    String
  category       RiskCategory
  likelihood     Int          @default(1) // 1-5 scale
  impact         Int          @default(1) // 1-5 scale
  riskScore      Int          @default(1) // calculated
  riskLevel      RiskLevel?
  owner          String?
  status         RiskStatus   @default(IDENTIFIED)
  dateIdentified DateTime?
  lastAssessed   DateTime?
  nextReview     DateTime?
  aiConfidence   Float?
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User?        @relation("RiskCreatedBy", fields: [createdBy], references: [id])
  assignedUser   User?        @relation("RiskAssignedTo", fields: [owner], references: [id])
  
  controls       ControlRiskMapping[]
  evidence       Document[]   @relation("RiskEvidence")
  comments       Comment[]
  tasks          Task[]
  activities     Activity[]
  
  // Spreadsheet relationships
  spreadsheetRows SpreadsheetRow[] @relation("SpreadsheetRowRisk")
  
  @@index([organizationId])
  @@index([category])
  @@index([status])
  @@index([riskLevel])
  @@index([createdAt])
  @@map("risks")
}

model ControlRiskMapping {
  id             String    @id @default(cuid())
  riskId         String
  controlId      String
  effectiveness  Float     @default(0) // 0-1 scale
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  risk           Risk      @relation(fields: [riskId], references: [id], onDelete: Cascade)
  control        Control   @relation(fields: [controlId], references: [id], onDelete: Cascade)
  
  @@unique([riskId, controlId])
  @@map("control_risk_mappings")
}

enum RiskCategory {
  OPERATIONAL
  FINANCIAL
  STRATEGIC
  COMPLIANCE
  TECHNOLOGY
}

enum RiskStatus {
  IDENTIFIED
  ASSESSED
  MITIGATED
  CLOSED
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// CONTROL MANAGEMENT
// ============================================================================

model Control {
  id                String        @id @default(cuid())
  title             String
  description       String
  type              ControlType
  category          ControlCategory @default(OPERATIONAL)
  frequency         String
  automationLevel   AutomationLevel @default(MANUAL)
  effectiveness     Float         @default(0) // 0-1 scale
  effectivenessRating EffectivenessRating?
  owner             String?
  operatorId        String?
  reviewerId        String?
  status            ControlStatus @default(PLANNED)
  priority          Priority?
  
  // Testing fields
  lastTestDate      DateTime?
  nextTestDate      DateTime?
  testResults       String?
  
  // Business context
  businessUnit      String?
  department        String?
  location          String?
  cost              Float?
  effort            ControlEffort?
  
  // Custom fields
  tags              String[]      @default([])
  customFields      Json?
  
  // Multi-tenant isolation
  organizationId    String
  
  // Audit fields
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         String?
  
  // Relationships
  organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator           User?         @relation("ControlCreatedBy", fields: [createdBy], references: [id])
  assignedUser      User?         @relation("ControlAssignedTo", fields: [owner], references: [id])
  
  risks             ControlRiskMapping[]
  evidence          Document[]    @relation("ControlEvidence")
  comments          Comment[]
  tasks             Task[]
  activities        Activity[]
  
  // Probo integration relationships
  frameworkControls      FrameworkControl[]
  controlAssessments     ControlAssessmentResult[]
  assessmentEvidence     AssessmentEvidence[]
  assessmentFindings     AssessmentFinding[]
  
  // Spreadsheet relationships
  spreadsheetRows   SpreadsheetRow[] @relation("SpreadsheetRowControl")
  
  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@map("controls")
}

enum ControlType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  DIRECTIVE
  COMPENSATING
}

enum ControlStatus {
  PLANNED
  IMPLEMENTED
  TESTING
  OPERATIONAL
  REMEDIATION
  DISABLED
  ACTIVE
  INACTIVE
}

enum ControlCategory {
  TECHNICAL
  ADMINISTRATIVE
  PHYSICAL
  OPERATIONAL
  MANAGEMENT
}

enum AutomationLevel {
  MANUAL
  SEMI_AUTOMATED
  FULLY_AUTOMATED
}

enum EffectivenessRating {
  NOT_EFFECTIVE
  PARTIALLY_EFFECTIVE
  LARGELY_EFFECTIVE
  FULLY_EFFECTIVE
}

enum ControlEffort {
  LOW
  MEDIUM
  HIGH
}

// ============================================================================
// DOCUMENT MANAGEMENT
// ============================================================================

model Document {
  id            String    @id @default(cuid())
  name          String
  type          String
  size          Int
  content       String?   // base64 encoded or file path
  extractedText String?
  aiAnalysis    Json?     // AI analysis results
  uploadedAt    DateTime  @default(now())
  
  // Multi-tenant isolation
  organizationId String
  uploadedBy     String?
  
  // Audit fields
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader       User?        @relation("DocumentCreatedBy", fields: [uploadedBy], references: [id])
  
  riskEvidence   Risk[]       @relation("RiskEvidence")
  controlEvidence Control[]   @relation("ControlEvidence")
  comments       Comment[]
  activities     Activity[]
  
  @@index([organizationId])
  @@index([type])
  @@index([uploadedAt])
  @@map("documents")
}

// ============================================================================
// RCSA IMPORT SYSTEM
// ============================================================================

model RcsaEntry {
  id              String   @id @default(cuid())
  riskId          String   // External risk identifier from imported file
  riskDescription String
  
  // Multi-tenant isolation
  organizationId  String
  uploadedBy      String?
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  organization    Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader        User?          @relation("RcsaEntryCreatedBy", fields: [uploadedBy], references: [id])
  
  controls        ControlEntry[]
  
  @@unique([riskId, organizationId]) // Prevent duplicate risk IDs within organization
  @@index([organizationId])
  @@index([riskId])
  @@index([createdAt])
  @@map("rcsa_entries")
}

model ControlEntry {
  id                 String    @id @default(cuid())
  controlId          String    // External control identifier from imported file
  controlDescription String
  rcsaEntryId        String    // Foreign key to RcsaEntry
  
  // Audit fields
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationships
  rcsaEntry          RcsaEntry @relation(fields: [rcsaEntryId], references: [id], onDelete: Cascade)
  
  @@index([rcsaEntryId])
  @@index([controlId])
  @@index([createdAt])
  @@map("control_entries")
}

model ExtractedRisk {
  id              String   @id @default(cuid())
  externalId      String   // AI-generated ID from extraction
  text            String   // Risk statement text
  sourceDocument  String   // Original document name
  extractedAt     DateTime @default(now())
  confidence      Float?   // AI confidence score (0-1)
  
  // Multi-tenant isolation
  organizationId  String
  extractedBy     String?
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  extractor       User?        @relation("ExtractedRiskCreatedBy", fields: [extractedBy], references: [id])
  
  @@index([organizationId])
  @@index([sourceDocument])
  @@index([extractedAt])
  @@map("extracted_risks")
}

model ExtractedControl {
  id              String   @id @default(cuid())
  externalId      String   // AI-generated ID from extraction
  text            String   // Control statement text
  sourceDocument  String   // Original document name
  extractedAt     DateTime @default(now())
  confidence      Float?   // AI confidence score (0-1)
  
  // Multi-tenant isolation
  organizationId  String
  extractedBy     String?
  
  // Audit fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  extractor       User?        @relation("ExtractedControlCreatedBy", fields: [extractedBy], references: [id])
  
  @@index([organizationId])
  @@index([sourceDocument])
  @@index([extractedAt])
  @@map("extracted_controls")
}

// ============================================================================
// QUESTIONNAIRE SYSTEM
// ============================================================================

model Questionnaire {
  id             String                 @id @default(cuid())
  title          String
  description    String
  questions      Json                   // Array of Question objects
  targetRoles    String[]              @default([])
  status         QuestionnaireStatus   @default(DRAFT)
  dueDate        DateTime?
  estimatedTime  Int?                  // minutes
  tags           String[]              @default([])
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  createdBy      String?
  
  // Relationships
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User?                 @relation("QuestionnaireCreatedBy", fields: [createdBy], references: [id])
  
  responses      Response[]
  activities     Activity[]
  
  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("questionnaires")
}

model Response {
  id             String        @id @default(cuid())
  questionnaireId String
  questionId     String
  userId         String
  answer         Json          // Flexible answer storage
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  questionnaire  Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([questionnaireId])
  @@index([userId])
  @@map("responses")
}

enum QuestionnaireStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

// ============================================================================
// WORKFLOW MANAGEMENT
// ============================================================================

model Workflow {
  id             String        @id @default(cuid())
  name           String
  description    String
  type           WorkflowType
  steps          Json          // Array of WorkflowStep objects
  status         WorkflowStatus @default(DRAFT)
  assignedTo     String[]      @default([])
  priority       Priority      @default(MEDIUM)
  completedAt    DateTime?
  tags           String[]      @default([])
  relatedEntities Json?        // Related risks, controls, documents
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      String?
  
  // Relationships
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User?         @relation("WorkflowCreatedBy", fields: [createdBy], references: [id])
  
  activities     Activity[]
  
  // Spreadsheet relationships
  spreadsheetIntegrations SpreadsheetWorkflow[] @relation("SpreadsheetWorkflowIntegration")
  
  @@index([organizationId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("workflows")
}

// New workflow system with proper step relationships
model WorkflowV2 {
  id             String         @id @default(cuid())
  name           String
  description    String
  type           WorkflowType
  status         WorkflowStatus @default(DRAFT)
  priority       Priority       @default(MEDIUM)
  completedAt    DateTime?
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      String?
  
  // Relationships
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  steps          WorkflowStep[]
  
  @@index([organizationId])
  @@index([status])
  @@map("workflows_v2")
}

model WorkflowStep {
  id           String           @id @default(cuid())
  workflowId   String
  name         String
  type         WorkflowStepType
  assigneeId   String?
  status       StepStatus       @default(PENDING)
  dueDate      DateTime?
  completedAt  DateTime?
  completedBy  String?
  order        Int
  conditions   Json?            // Workflow conditions
  
  // Audit fields
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // Relationships
  workflow     WorkflowV2       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  assignee     User?            @relation("WorkflowStepAssignedTo", fields: [assigneeId], references: [id])
  
  @@index([workflowId])
  @@index([assigneeId])
  @@map("workflow_steps")
}

enum WorkflowType {
  APPROVAL
  REVIEW
  ASSESSMENT
  CUSTOM
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum WorkflowStepType {
  APPROVAL
  REVIEW
  ACTION
  NOTIFICATION
}

enum StepStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  SKIPPED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// REPORTING SYSTEM
// ============================================================================

model Report {
  id             String       @id @default(cuid())
  title          String
  type           ReportType
  status         ReportStatus @default(DRAFT)
  data           Json?        // Report data and configuration
  parameters     Json?        // Report parameters
  sharedWith     String[]     @default([])
  exportFormats  String[]     @default([])
  
  // Scheduling fields
  isScheduled    Boolean      @default(false)
  frequency      String?      // daily, weekly, monthly, quarterly
  recipients     String[]     @default([])
  nextRun        DateTime?
  lastRun        DateTime?
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User?        @relation("ReportCreatedBy", fields: [createdBy], references: [id])
  
  activities     Activity[]
  
  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([isScheduled])
  @@map("reports")
}

enum ReportType {
  RISK_ASSESSMENT
  CONTROL_EFFECTIVENESS
  COMPLIANCE
  AUDIT
  EXECUTIVE_DASHBOARD
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ============================================================================
// TASK MANAGEMENT
// ============================================================================

model Task {
  id              String      @id @default(cuid())
  title           String
  description     String?
  type            TaskType
  status          TaskStatus  @default(TODO)
  priority        Priority    @default(MEDIUM)
  assigneeId      String?
  assignedBy      String?
  dueDate         DateTime?
  completedAt     DateTime?
  estimatedHours  Int?
  actualHours     Int?
  tags            String[]    @default([])
  
  // Related entities
  riskId          String?
  controlId       String?
  
  // Multi-tenant isolation
  organizationId  String
  
  // Audit fields
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       String?
  
  // Relationships
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignee        User?        @relation("TaskAssignedTo", fields: [assigneeId], references: [id])
  creator         User?        @relation("TaskCreatedBy", fields: [createdBy], references: [id])
  risk            Risk?        @relation(fields: [riskId], references: [id])
  control         Control?     @relation(fields: [controlId], references: [id])
  
  comments        Comment[]
  activities      Activity[]
  
  // Spreadsheet relationships
  spreadsheetRows SpreadsheetRow[] @relation("SpreadsheetRowTask")
  
  @@index([organizationId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

enum TaskType {
  RISK_ASSESSMENT
  CONTROL_TESTING
  DOCUMENT_REVIEW
  WORKFLOW_STEP
  CUSTOM
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// ============================================================================
// COLLABORATION & COMMUNICATION
// ============================================================================

model Message {
  id             String        @id @default(cuid())
  content        String
  type           MessageType   @default(DIRECT)
  status         MessageStatus @default(SENT)
  senderId       String
  recipientIds   String[]      @default([])
  threadId       String?
  mentions       String[]      @default([])
  attachments    Json?         // File attachments
  
  // Audit fields
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Relationships
  sender         User          @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipients     User[]        @relation("MessageRecipient")
  
  @@index([senderId])
  @@index([threadId])
  @@index([createdAt])
  @@map("messages")
}

model Comment {
  id             String      @id @default(cuid())
  content        String
  authorId       String
  entityType     EntityType
  entityId       String
  parentId       String?     // For threaded comments
  mentions       String[]    @default([])
  attachments    Json?
  
  // Audit fields
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relationships
  author         User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent         Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[]   @relation("CommentReplies")
  
  // Entity relationships with unique constraint names
  risk           Risk?       @relation(fields: [entityId], references: [id], map: "comment_risk_fkey")
  control        Control?    @relation(fields: [entityId], references: [id], map: "comment_control_fkey")
  document       Document?   @relation(fields: [entityId], references: [id], map: "comment_document_fkey")
  task           Task?       @relation(fields: [entityId], references: [id], map: "comment_task_fkey")
  
  @@index([entityType, entityId])
  @@index([authorId])
  @@index([createdAt])
  @@map("comments")
}

model Notification {
  id                   String           @id @default(cuid())
  type                 NotificationType
  title                String
  message              String
  read                 Boolean          @default(false)
  isRead               Boolean          @default(false) // Alias for consistency
  readAt               DateTime?
  deliveredAt          DateTime?
  userId               String
  recipientId          String           // Alias for userId for consistency
  senderId             String?          @default("system")
  entityType           String?          @default("SYSTEM")
  entityId             String?          @default("system")
  actionUrl            String?
  relatedEntityType    String?
  relatedEntityId      String?
  priority             Priority         @default(MEDIUM)
  
  // Digest fields
  includeInDigest      Boolean          @default(false)
  pendingDigest        Boolean          @default(false)
  digestFrequency      String?
  digestSentAt         DateTime?
  
  // Audit fields
  createdAt            DateTime         @default(now())
  
  // Relationships
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([recipientId])
  @@index([read])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum MessageType {
  DIRECT
  GROUP
  BROADCAST
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum EntityType {
  RISK
  CONTROL
  DOCUMENT
  TASK
  WORKFLOW
  QUESTIONNAIRE
  REPORT
  USER
}

enum NotificationType {
  SUCCESS
  ERROR
  WARNING
  INFO
  MENTION
  TASK_ASSIGNED
  WORKFLOW_UPDATE
  APPROVAL_REQUIRED
  COMMENT_CREATED
  DOCUMENT_SHARED
  RISK_UPDATED
  CONTROL_UPDATED
  SUBSCRIPTION_CANCELED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  TRIAL_ENDING
  NOTIFICATION_DIGEST
}

// ============================================================================
// ACTIVITY LOGGING & AUDIT TRAIL
// ============================================================================

model Activity {
  id             String       @id @default(cuid())
  type           ActivityType
  userId         String?
  entityType     EntityType
  entityId       String
  description    String
  metadata       Json?
  isPublic       Boolean      @default(true)
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime     @default(now())
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation("ActivityCreatedBy", fields: [userId], references: [id])
  
  // Entity relationships with unique constraint names
  risk           Risk?        @relation(fields: [entityId], references: [id], map: "activity_risk_fkey")
  control        Control?     @relation(fields: [entityId], references: [id], map: "activity_control_fkey")
  document       Document?    @relation(fields: [entityId], references: [id], map: "activity_document_fkey")
  questionnaire  Questionnaire? @relation(fields: [entityId], references: [id], map: "activity_questionnaire_fkey")
  workflow       Workflow?    @relation(fields: [entityId], references: [id], map: "activity_workflow_fkey")
  report         Report?      @relation(fields: [entityId], references: [id], map: "activity_report_fkey")
  task           Task?        @relation(fields: [entityId], references: [id], map: "activity_task_fkey")
  
  @@index([organizationId])
  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  READ
  APPROVED
  REJECTED
  SUBMITTED
  COMPLETED
  ASSIGNED
  COMMENTED
  UPLOADED
  DOWNLOADED
  EXPORTED
  IMPORTED
}

// ============================================================================
// AI & ANALYTICS
// ============================================================================

model AIConversation {
  id             String   @id @default(cuid())
  userId         String
  title          String
  agentType      String
  messages       Json     // Array of conversation messages
  context        Json?    // Conversation context
  status         String   @default("active")
  tokenUsage     Int      @default(0)
  estimatedCost  Float    @default(0)
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_conversations")
}

model AIUsageLog {
  id             String   @id @default(cuid())
  userId         String
  requestType    String
  promptTokens   Int
  completionTokens Int
  totalTokens    Int
  estimatedCost  Float
  responseTime   Int      // milliseconds
  success        Boolean  @default(true)
  errorMessage   String?
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime @default(now())
  
  // Relationships
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_usage_logs")
}

// ============================================================================
// NOTIFICATION PREFERENCES
// ============================================================================

model NotificationPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  email          Json     // Email notification preferences
  push           Json     // Push notification preferences
  sms            Json     // SMS notification preferences
  slack          Json     // Slack notification preferences
  inApp          Json     // In-app notification preferences
  quietHours     Json     // Quiet hours settings
  
  // Audit fields
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

// ============================================================================
// ENCRYPTION & SECURITY
// ============================================================================

model EncryptionKey {
  id             String   @id @default(cuid())
  purpose        String
  encryptedKey   String
  algorithm      String
  status         String   @default("active") // active, rotated, revoked
  version        Int      @default(1)
  metadata       Json?
  
  // Multi-tenant isolation
  organizationId String
  
  // Audit fields
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  rotatedAt      DateTime @default(now())
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([purpose])
  @@index([status])
  @@map("encryption_keys")
}

model EncryptionKeyHistory {
  id             String   @id @default(cuid())
  keyId          String
  version        Int
  encryptedKey   String
  rotatedAt      DateTime
  reason         String
  
  // Audit fields
  createdAt      DateTime @default(now())
  
  @@index([keyId])
  @@map("encryption_key_history")
}

// ============================================================================
// BILLING & SUBSCRIPTIONS
// ============================================================================

model SubscriptionPlan {
  id               String   @id @default(cuid())
  name             String
  description      String
  type             String   // freemium, professional, enterprise, custom
  price            Float
  currency         String   @default("USD")
  billingInterval  String   // monthly, quarterly, yearly
  features         Json     // Array of features
  limits           Json     // Usage limits
  isActive         Boolean  @default(true)
  trialDays        Int      @default(0)
  stripeProductId  String?
  stripePriceId    String?
  
  // Audit fields
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  subscriptions    OrganizationSubscription[]
  
  @@map("subscription_plans")
}

model OrganizationSubscription {
  id                    String   @id @default(cuid())
  organizationId        String
  planId                String
  stripeSubscriptionId  String?
  stripeCustomerId      String?
  status                String   // active, trialing, past_due, canceled, paused
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  trialStart            DateTime?
  trialEnd              DateTime?
  canceledAt            DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  billingCycle          String   // monthly, quarterly, yearly
  quantity              Int      @default(1)
  unitPrice             Float
  metadata              Json?
  
  // Audit fields
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  invoices              Invoice[]
  usageRecords          UsageRecord[]
  
  @@index([organizationId])
  @@index([stripeSubscriptionId])
  @@map("organization_subscriptions")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  organizationId        String
  stripePaymentMethodId String
  type                  String   // card, bank_account, etc.
  card                  Json?    // Card details (last4, brand, etc.)
  bankAccount           Json?    // Bank account details
  isDefault             Boolean  @default(false)
  isActive              Boolean  @default(true)
  metadata              Json?
  
  // Audit fields
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([organizationId])
  @@map("payment_methods")
}

model Invoice {
  id                    String   @id @default(cuid())
  organizationId        String
  subscriptionId        String?
  stripeInvoiceId       String?  @unique
  invoiceNumber         String
  status                String   // draft, open, paid, void, uncollectible
  type                  String   // subscription, usage, one-time
  subtotal              Float
  taxAmount             Float    @default(0)
  discountAmount        Float    @default(0)
  total                 Float
  currency              String   @default("USD")
  billingPeriod         Json?    // { start: Date, end: Date }
  lineItems             Json     // Array of line items
  dueDate               DateTime
  paidAt                DateTime?
  metadata              Json?
  
  // Audit fields
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  subscription          OrganizationSubscription? @relation(fields: [subscriptionId], references: [id])
  
  @@index([organizationId])
  @@index([subscriptionId])
  @@map("invoices")
}

model UsageRecord {
  id                    String   @id @default(cuid())
  organizationId        String
  subscriptionId        String
  metricType            String   // api_calls, storage_gb, ai_queries, users, etc.
  quantity              Float
  unitPrice             Float    @default(0)
  total                 Float    @default(0)
  period                DateTime
  metadata              Json?
  
  // Audit fields
  createdAt             DateTime @default(now())
  
  // Relationships
  subscription          OrganizationSubscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([organizationId])
  @@index([subscriptionId])
  @@index([metricType])
  @@index([period])
  @@map("usage_records")
}

model BillingEvent {
  id                    String   @id @default(cuid())
  organizationId        String
  type                  String   // subscription_created, payment_succeeded, payment_failed, etc.
  eventData             Json
  stripeEventId         String?  @unique
  processed             Boolean  @default(false)
  processedAt           DateTime?
  errorMessage          String?
  retryCount            Int      @default(0)
  nextRetryAt           DateTime?
  
  // Audit fields
  createdAt             DateTime @default(now())
  
  // Relationships
  organization          Organization @relation(fields: [organizationId], references: [id])
  
  @@index([organizationId])
  @@index([type])
  @@index([processed])
  @@map("billing_events")
}

// ============================================================================
// API KEY MANAGEMENT
// ============================================================================

model APIKey {
  id                    String   @id @default(cuid())
  organizationId        String
  name                  String
  description           String?
  key                   String   @unique
  hashedKey             String   @unique
  permissions           String[]
  ipWhitelist           String[]
  lastUsedAt            DateTime?
  expiresAt             DateTime?
  isActive              Boolean  @default(true)
  
  // Audit fields
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relationships
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
  @@index([hashedKey])
  @@map("api_keys")
}

// ============================================================================
// RISCURA INTEGRATED SPREADSHEET PLATFORM (RISP)
// ============================================================================

model Spreadsheet {
  id              String   @id @default(cuid())
  organizationId  String
  name           String
  description    String?
  templateType   SpreadsheetType
  isTemplate     Boolean  @default(false)
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User          @relation("SpreadsheetCreatedBy", fields: [createdBy], references: [id])
  sheets         SpreadsheetSheet[]
  permissions    SpreadsheetPermission[]
  workflows      SpreadsheetWorkflow[]
  versions       SpreadsheetVersion[]
  
  @@index([organizationId])
  @@index([templateType])
  @@index([createdBy])
  @@map("spreadsheets")
}

model SpreadsheetSheet {
  id              String   @id @default(cuid())
  spreadsheetId   String
  name           String
  position       Int
  isHidden       Boolean  @default(false)
  settings       Json?    // Sheet-specific settings
  
  // Schema Definition
  columns        SpreadsheetColumn[]
  rows           SpreadsheetRow[]
  
  spreadsheet    Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  
  @@index([spreadsheetId])
  @@map("spreadsheet_sheets")
}

model SpreadsheetColumn {
  id              String   @id @default(cuid())
  sheetId         String
  name           String
  position       Int
  dataType       ColumnDataType
  isRequired     Boolean  @default(false)
  isCalculated   Boolean  @default(false)
  formula        String?
  width          Int      @default(150)
  
  // Integration with Riscura entities
  linkedEntity   String?  // "risk", "control", "user", etc.
  linkedField    String?  // field name in the linked entity
  
  // Validation and constraints
  validationRules Json?
  dropdownOptions String[]
  
  // Formatting
  formatSettings Json?
  
  sheet          SpreadsheetSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  cells          SpreadsheetCell[]
  
  @@index([sheetId])
  @@map("spreadsheet_columns")
}

model SpreadsheetRow {
  id              String   @id @default(cuid())
  sheetId         String
  position       Int
  isHidden       Boolean  @default(false)
  height         Int      @default(40)
  
  // Links to actual Riscura entities
  linkedRiskId    String?
  linkedControlId String?
  linkedTaskId    String?
  
  sheet          SpreadsheetSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  cells          SpreadsheetCell[]
  linkedRisk     Risk?            @relation("SpreadsheetRowRisk", fields: [linkedRiskId], references: [id])
  linkedControl  Control?         @relation("SpreadsheetRowControl", fields: [linkedControlId], references: [id])
  linkedTask     Task?            @relation("SpreadsheetRowTask", fields: [linkedTaskId], references: [id])
  
  @@index([sheetId])
  @@index([linkedRiskId])
  @@index([linkedControlId])
  @@map("spreadsheet_rows")
}

model SpreadsheetCell {
  id              String   @id @default(cuid())
  rowId          String
  columnId       String
  value          Json?
  displayValue   String?
  isLocked       Boolean  @default(false)
  lastModifiedBy String
  lastModifiedAt DateTime @default(now())
  
  // Formatting
  formatting     Json?
  
  row            SpreadsheetRow    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column         SpreadsheetColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
  modifier       User             @relation("SpreadsheetCellModifier", fields: [lastModifiedBy], references: [id])
  comments       SpreadsheetCellComment[]
  
  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
  @@index([lastModifiedBy])
  @@map("spreadsheet_cells")
}

model SpreadsheetCellComment {
  id          String   @id @default(cuid())
  cellId      String
  userId      String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolved    Boolean  @default(false)
  parentId    String?  // For replies
  
  cell        SpreadsheetCell @relation(fields: [cellId], references: [id], onDelete: Cascade)
  user        User           @relation("SpreadsheetCellCommentUser", fields: [userId], references: [id])
  parent      SpreadsheetCellComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies     SpreadsheetCellComment[] @relation("CommentReplies")
  
  @@index([cellId])
  @@index([userId])
  @@map("spreadsheet_cell_comments")
}

model SpreadsheetPermission {
  id              String   @id @default(cuid())
  spreadsheetId   String
  userId          String
  permission      SpreadsheetPermissionType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  spreadsheet     Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  user            User        @relation("SpreadsheetPermissionUser", fields: [userId], references: [id])
  
  @@unique([spreadsheetId, userId])
  @@index([spreadsheetId])
  @@index([userId])
  @@map("spreadsheet_permissions")
}

model SpreadsheetWorkflow {
  id              String   @id @default(cuid())
  spreadsheetId   String
  workflowId      String
  triggerType     String   // on_cell_change, on_row_complete, manual
  triggerConfig   Json?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  spreadsheet     Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  workflow        Workflow    @relation("SpreadsheetWorkflowIntegration", fields: [workflowId], references: [id])
  
  @@index([spreadsheetId])
  @@index([workflowId])
  @@map("spreadsheet_workflows")
}

model SpreadsheetVersion {
  id              String   @id @default(cuid())
  spreadsheetId   String
  version        Int
  changedBy      String
  changes        Json     // Array of changes made
  createdAt      DateTime @default(now())
  description    String?
  
  spreadsheet    Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  user           User        @relation("SpreadsheetVersionUser", fields: [changedBy], references: [id])
  
  @@index([spreadsheetId])
  @@index([version])
  @@map("spreadsheet_versions")
}

model SpreadsheetTemplate {
  id              String   @id @default(cuid())
  organizationId  String?  // null for system templates
  name           String
  description    String
  category       String
  templateType   SpreadsheetType
  config         Json     // Template configuration
  isPublic       Boolean  @default(false)
  isActive       Boolean  @default(true)
  usageCount     Int      @default(0)
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization? @relation("SpreadsheetTemplateOrg", fields: [organizationId], references: [id], onDelete: Cascade)
  creator        User         @relation("SpreadsheetTemplateCreator", fields: [createdBy], references: [id])
  
  @@index([organizationId])
  @@index([templateType])
  @@index([category])
  @@map("spreadsheet_templates")
}

// Enums for Spreadsheet Platform
enum SpreadsheetType {
  RCSA_ASSESSMENT
  RISK_REGISTER
  CONTROL_MATRIX
  COMPLIANCE_TRACKER
  VENDOR_ASSESSMENT
  AUDIT_FINDINGS
  INCIDENT_TRACKER
  CUSTOM
}

enum ColumnDataType {
  TEXT
  NUMBER
  DATE
  DATETIME
  BOOLEAN
  DROPDOWN
  MULTI_SELECT
  USER_REFERENCE
  RISK_REFERENCE
  CONTROL_REFERENCE
  TASK_REFERENCE
  CALCULATED
  RATING
  CURRENCY
  PERCENTAGE
  EMAIL
  URL
  PHONE
  FILE_ATTACHMENT
}

enum SpreadsheetPermissionType {
  OWNER
  EDITOR
  COMMENTER
  VIEWER
}

// ============================================================================
// PROBO INTEGRATION MODELS - SOC 2 & COMPLIANCE
// ============================================================================

model ComplianceFramework {
  id           String @id @default(cuid())
  name         String
  version      String
  description  String?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Multi-tenant isolation
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relationships
  controls     FrameworkControl[]
  requirements FrameworkRequirement[]
  assessments  ComplianceAssessment[]
  
  @@index([organizationId])
  @@map("compliance_frameworks")
}

model FrameworkControl {
  id            String @id @default(cuid())
  frameworkId   String
  controlId     String
  requirement   String
  description   String
  category      String
  isRequired    Boolean @default(true)
  orderIndex    Int?
  
  framework     ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  control       Control @relation(fields: [controlId], references: [id], onDelete: Cascade)
  
  @@unique([frameworkId, controlId])
  @@index([frameworkId])
  @@index([controlId])
  @@map("framework_controls")
}

model FrameworkRequirement {
  id           String @id @default(cuid())
  frameworkId  String
  title        String
  description  String
  category     String
  controls     String[] // Array of control IDs
  priority     String @default("MEDIUM") // HIGH, MEDIUM, LOW
  
  framework    ComplianceFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  
  @@index([frameworkId])
  @@map("framework_requirements")
}

model ComplianceAssessment {
  id              String @id @default(cuid())
  frameworkId     String
  name            String
  description     String?
  status          ComplianceAssessmentStatus @default(PLANNING)
  progress        Int @default(0) // 0-100%
  startDate       DateTime?
  targetDate      DateTime?
  completedDate   DateTime?
  assessor        String // User ID
  
  // Multi-tenant isolation
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  framework       ComplianceFramework @relation(fields: [frameworkId], references: [id])
  assessorUser    User @relation("ComplianceAssessmentAssessor", fields: [assessor], references: [id])
  
  // Assessment results
  controlAssessments ControlAssessmentResult[]
  evidenceItems      AssessmentEvidence[]
  findings           AssessmentFinding[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([organizationId])
  @@index([frameworkId])
  @@index([status])
  @@map("compliance_assessments")
}

model ControlAssessmentResult {
  id              String @id @default(cuid())
  assessmentId    String
  controlId       String
  status          ControlAssessmentStatus @default(NOT_ASSESSED)
  effectiveness   EffectivenessRating?
  implementationStatus String? // IMPLEMENTED, PARTIALLY_IMPLEMENTED, NOT_IMPLEMENTED
  evidence        String?
  notes           String?
  assessedBy      String
  assessedDate    DateTime?
  
  assessment      ComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  control         Control @relation(fields: [controlId], references: [id])
  assessor        User @relation("ControlAssessmentAssessor", fields: [assessedBy], references: [id])
  
  @@unique([assessmentId, controlId])
  @@index([assessmentId])
  @@index([controlId])
  @@map("control_assessment_results")
}

model AssessmentEvidence {
  id            String @id @default(cuid())
  assessmentId  String
  controlId     String?
  name          String
  description   String?
  evidenceType  String // DOCUMENT, SCREENSHOT, CONFIGURATION, INTERVIEW
  fileUrl       String?
  uploadedBy    String
  uploadedAt    DateTime @default(now())
  
  assessment    ComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  control       Control? @relation(fields: [controlId], references: [id])
  uploader      User @relation("AssessmentEvidenceUploader", fields: [uploadedBy], references: [id])
  
  @@index([assessmentId])
  @@index([controlId])
  @@map("assessment_evidence")
}

model AssessmentFinding {
  id            String @id @default(cuid())
  assessmentId  String
  controlId     String?
  title         String
  description   String
  severity      FindingSeverity
  status        FindingStatus @default(OPEN)
  remediation   String?
  dueDate       DateTime?
  assignedTo    String?
  
  assessment    ComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  control       Control? @relation(fields: [controlId], references: [id])
  assignee      User? @relation("AssessmentFindingAssignee", fields: [assignedTo], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([assessmentId])
  @@index([status])
  @@index([severity])
  @@map("assessment_findings")
}

// ============================================================================
// VENDOR RISK ASSESSMENT MODELS
// ============================================================================

model Vendor {
  id              String @id @default(cuid())
  name            String
  legalName       String?
  description     String?
  category        VendorCategory
  websiteUrl      String?
  
  // Contact Information
  primaryContact  String?
  email           String?
  phone           String?
  address         String?
  
  // Risk Information
  riskTier        VendorRiskTier @default(MEDIUM)
  criticality     VendorCriticality @default(MEDIUM)
  dataAccess      String[] // Types of data vendor has access to
  
  // Compliance Information
  certifications  String[] // SOC2, ISO27001, etc.
  lastReviewed    DateTime?
  nextReview      DateTime?
  
  // Multi-tenant isolation
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Relationships
  assessments     VendorAssessment[]
  contracts       VendorContract[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([organizationId])
  @@index([category])
  @@index([riskTier])
  @@map("vendors")
}

model VendorAssessment {
  id                String @id @default(cuid())
  vendorId          String
  assessmentType    VendorAssessmentType @default(INITIAL)
  riskScore         Int
  complianceStatus  VendorComplianceStatus
  assessmentDate    DateTime @default(now())
  assessedBy        String
  
  // Vendor Information (captured at time of assessment)
  vendorSnapshot    Json // Snapshot of vendor info at time of assessment
  
  // Assessment Results
  securityScore     Int?
  privacyScore      Int?
  complianceScore   Int?
  
  // Multi-tenant isolation
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vendor            Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  assessor          User @relation("VendorAssessmentAssessor", fields: [assessedBy], references: [id])
  
  // Assessment artifacts
  findings          VendorFinding[]
  documents         VendorDocument[]
  
  @@index([organizationId])
  @@index([vendorId])
  @@index([assessmentDate])
  @@map("vendor_assessments")
}

model VendorFinding {
  id           String @id @default(cuid())
  assessmentId String
  category     String
  severity     FindingSeverity
  title        String
  description  String
  remediation  String?
  status       FindingStatus @default(OPEN)
  dueDate      DateTime?
  
  assessment   VendorAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([assessmentId])
  @@index([severity])
  @@index([status])
  @@map("vendor_findings")
}

model VendorDocument {
  id           String @id @default(cuid())
  assessmentId String
  name         String
  documentType String // SECURITY_POLICY, SOC2_REPORT, PRIVACY_POLICY, etc.
  fileUrl      String?
  externalUrl  String?
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  
  assessment   VendorAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  uploader     User @relation("VendorDocumentUploader", fields: [uploadedBy], references: [id])
  
  @@index([assessmentId])
  @@map("vendor_documents")
}

model VendorContract {
  id              String @id @default(cuid())
  vendorId        String
  contractType    String // MSA, DPA, BAA, SLA, etc.
  startDate       DateTime
  endDate         DateTime?
  renewalDate     DateTime?
  value           Float?
  currency        String @default("USD")
  status          ContractStatus @default(ACTIVE)
  
  // Security clauses
  hasSecurityClause Boolean @default(false)
  hasDataClause     Boolean @default(false)
  hasIncidentClause Boolean @default(false)
  
  vendor          Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([vendorId])
  @@index([status])
  @@index([endDate])
  @@map("vendor_contracts")
}

// ============================================================================
// MITIGATION CONTROLS LIBRARY
// ============================================================================

model MitigationControl {
  id          String @id @default(cuid())
  name        String
  category    String
  importance  MitigationImportance
  standards   String // ISO27001:2022-A.5.16;SOC2-CC6.1;etc.
  description String
  
  // Implementation guidance
  implementation String?
  evidence       String?
  frequency      String? // CONTINUOUS, DAILY, WEEKLY, MONTHLY, QUARTERLY, ANNUALLY
  
  // Relationships to existing controls
  linkedControls String[] // Array of Control IDs
  
  // Multi-tenant (can be global or organization-specific)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([organizationId])
  @@index([category])
  @@index([importance])
  @@map("mitigation_controls")
}

// ============================================================================
// ENUMS FOR PROBO INTEGRATION
// ============================================================================

enum ComplianceAssessmentStatus {
  PLANNING
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  PAUSED
  CANCELLED
}

enum ControlAssessmentStatus {
  NOT_ASSESSED
  IN_PROGRESS
  NEEDS_EVIDENCE
  UNDER_REVIEW
  PASSED
  FAILED
  NOT_APPLICABLE
}

enum FindingSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FindingStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ACCEPTED_RISK
  FALSE_POSITIVE
}

enum VendorCategory {
  ANALYTICS
  CLOUD_MONITORING
  CLOUD_PROVIDER
  COLLABORATION
  CUSTOMER_SUPPORT
  DATA_STORAGE_AND_PROCESSING
  DOCUMENT_MANAGEMENT
  EMPLOYEE_MANAGEMENT
  ENGINEERING
  FINANCE
  IDENTITY_PROVIDER
  IT
  MARKETING
  OFFICE_OPERATIONS
  OTHER
  PASSWORD_MANAGEMENT
  PRODUCT_AND_DESIGN
  PROFESSIONAL_SERVICES
  RECRUITING
  SALES
  SECURITY
  VERSION_CONTROL
}

enum VendorRiskTier {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VendorCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VendorAssessmentType {
  INITIAL
  ANNUAL
  CHANGE_TRIGGERED
  INCIDENT_TRIGGERED
  AD_HOC
}

enum VendorComplianceStatus {
  COMPLIANT
  MODERATE_RISK
  HIGH_RISK
  CRITICAL_RISK
  NOT_ASSESSED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  UNDER_REVIEW
}

enum MitigationImportance {
  MANDATORY
  PREFERRED
  ADVANCED
}

// Probo Integration Models
model ProboControl {
  id            String   @id @default(cuid())
  controlId     String   @unique // Probo control ID (e.g., "enforce-sso")
  name          String
  category      String
  importance    ProboImportance
  standards     String[] // Array of standards (ISO27001, SOC2, etc.)
  description   String   @db.Text
  
  // Implementation tracking
  status        ControlStatus @default(PLANNED)
  assignedTo    String?
  dueDate       DateTime?
  completedDate DateTime?
  
  // Evidence and documentation
  evidences     ProboEvidence[]
  tasks         ProboTask[]
  measures      ProboMeasure[]
  
  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("probo_controls")
}

model ProboEvidence {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  type          EvidenceType
  status        EvidenceStatus @default(DRAFT)
  
  // File/document details
  fileName      String?
  fileUrl       String?
  fileSize      Int?
  mimeType      String?
  
  // Metadata
  collectedBy   String
  collectedDate DateTime @default(now())
  validUntil    DateTime?
  
  // Relationships
  controlId     String
  control       ProboControl @relation(fields: [controlId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("probo_evidences")
}

model ProboTask {
  id            String   @id @default(cuid())
  title         String
  description   String?  @db.Text
  status        TaskStatus @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  
  // Scheduling
  dueDate       DateTime?
  estimatedHours Int?
  actualHours   Int?
  
  // Assignment
  assignedTo    String?
  assignedBy    String
  completedBy   String?
  completedDate DateTime?
  
  // Relationships
  controlId     String?
  control       ProboControl? @relation(fields: [controlId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("probo_tasks")
}

model ProboMeasure {
  id            String   @id @default(cuid())
  name          String
  description   String?  @db.Text
  type          MeasureType
  status        MeasureStatus @default(PLANNED)
  
  // Implementation details
  implementationDate DateTime?
  reviewDate    DateTime?
  nextReviewDate DateTime?
  
  // Effectiveness
  effectivenessScore Int? // 1-100
  lastTestDate  DateTime?
  testResults   String? @db.Text
  
  // Relationships
  controlId     String
  control       ProboControl @relation(fields: [controlId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("probo_measures")
}

// Enums for Probo Integration
enum ProboImportance {
  MANDATORY
  PREFERRED
  ADVANCED
}

enum EvidenceType {
  DOCUMENT
  SCREENSHOT
  POLICY
  PROCEDURE
  CERTIFICATE
  LOG_FILE
  CONFIGURATION
  OTHER
}

enum EvidenceStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum MeasureType {
  PREVENTIVE
  DETECTIVE
  CORRECTIVE
  COMPENSATING
}

enum MeasureStatus {
  PLANNED
  IMPLEMENTED
  TESTING
  ACTIVE
  INACTIVE
  FAILED
}

enum AssessmentMethod {
  AUTOMATED
  MANUAL
  HYBRID
  AI_POWERED
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum RequirementStatus {
  NOT_STARTED
  IN_PROGRESS
  IMPLEMENTED
  TESTED
  APPROVED
} 